/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package me.khanh.clothingshopsalemanagement.view.panel;

import java.awt.Color;
import java.util.HashMap;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;
import lombok.Getter;
import me.khanh.clothingshopsalemanagement.model.ClothingShopSaleManagement;
import me.khanh.clothingshopsalemanagement.model.authentication.Permission;
import me.khanh.clothingshopsalemanagement.model.authentication.User;
import me.khanh.clothingshopsalemanagement.model.authentication.UserDAO;
import me.khanh.clothingshopsalemanagement.util.HashUtil;

/**
 * UserManagementPanel is a GUI panel that allows for the management of users in
 * a clothing shop sale management system. It provides functionalities for
 * adding, updating, and deleting users, as well as displaying them in a table.
 * This panel interacts with the underlying UserDAO to perform CRUD operations
 * on the user data.
 *
 * The panel consists of a table displaying user information and input fields to
 * add or update user details. The input validations for username and password
 * are also implemented here.
 *
 * @author ADMIN
 * @version 1.0
 */
public class UserManagementPanel extends javax.swing.JPanel {

    /**
     * Reference to the DashboardPanel for accessing the main frame and loading
     * indicators.
     */
    @Getter
    private final DashboardPanel panel;
    /**
     * Data Access Object for user operations.
     */
    @Getter
    private final UserDAO userDAO;
    /**
     * Cached list of users fetched from the database.
     */
    @Getter
    private HashMap<String, User> cachedUsers;

    private static final Pattern USERNAME_PATTERN = Pattern.compile("^[a-zA-Z0-9]([._-](?![._-])|[a-zA-Z0-9]){3,18}[a-zA-Z0-9]$");
    private static final Pattern PASSWORD_PATTERN = Pattern.compile("^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#&()â€“[{}]:;',?/*~$^+=<>]).{8,20}$");
    
    private JTextField lastInvalidField;
    private Border lastInvalidFiledBorder;
    private final LineBorder errorBorder = new LineBorder(Color.RED, 2);

    /**
     * Creates a new UserManagementPanel instance. Initializes the panel
     * components, sets up event listeners, and fetches user data to populate
     * the table.
     *
     * @param panel The DashboardPanel reference.
     */
    public UserManagementPanel(DashboardPanel panel) {
        this.panel = panel;
        this.userDAO = ClothingShopSaleManagement.getInstance().getDAOManager().getUserDAO();

        initComponents();

        registerTableSelectionListener();

        table.setCellSelectionEnabled(false);
        table.setRowSelectionAllowed(true);

        updateTableValues();
    }

    /**
     * Updates the table with the latest user data fetched from the database.
     */
    private void updateTableValues() {
        panel.getMainFrame().showLoading();

        userDAO.getAll().thenAccept((users) -> {

            cachedUsers = new HashMap<>();
            for (User user: users) {
                cachedUsers.put(user.getUsername(), user);
            }

            DefaultTableModel model = new javax.swing.table.DefaultTableModel(
                    new Object[][]{},
                    new String[]{
                        "Username", "Full Name", "Permission"
                    }
            ) {
                Class[] types = new Class[]{
                    java.lang.String.class, java.lang.String.class, java.lang.String.class
                };
                boolean[] canEdit = new boolean[]{
                    false, false, false
                };

                @Override
                public Class getColumnClass(int columnIndex) {
                    return types[columnIndex];
                }

                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            };

            for (User user : users) {
                model.addRow(new Object[]{user.getUsername(), user.getFullName(), user.getPermission()});
            }

            table.setModel(model);
            
            table.getTableHeader().setReorderingAllowed(false);

            panel.getMainFrame().hideLoading();
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tableScrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        userManagementLabel = new javax.swing.JLabel();
        fullNameLabel = new javax.swing.JLabel();
        usernameText = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        passwordText = new javax.swing.JTextField();
        fullNameText = new javax.swing.JTextField();
        permissionLabel = new javax.swing.JLabel();
        permissionDropdown = new javax.swing.JComboBox<>();
        deleteButton = new javax.swing.JButton();
        addUserButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        refreshIcon = new javax.swing.JLabel();

        setToolTipText("");
        setMaximumSize(new java.awt.Dimension(640, 440));
        setMinimumSize(new java.awt.Dimension(640, 440));
        setPreferredSize(new java.awt.Dimension(640, 440));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "Full Name", "Permission"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setColumnSelectionAllowed(true);
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table.getTableHeader().setReorderingAllowed(false);
        tableScrollPane.setViewportView(table);
        table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
            table.getColumnModel().getColumn(1).setResizable(false);
            table.getColumnModel().getColumn(2).setResizable(false);
        }

        userManagementLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        userManagementLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userManagementLabel.setText("User Management");
        userManagementLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        fullNameLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        fullNameLabel.setText("Full Name");

        passwordLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        passwordLabel.setText("Password");

        usernameLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        usernameLabel.setText("Username");

        permissionLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        permissionLabel.setText("Permission");

        permissionDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Administrator", "Moderator" }));

        deleteButton.setBackground(new java.awt.Color(19, 105, 192));
        deleteButton.setForeground(new java.awt.Color(253, 254, 254));
        deleteButton.setText("Delete");
        deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteButtonMouseClicked(evt);
            }
        });

        addUserButton.setBackground(new java.awt.Color(19, 105, 192));
        addUserButton.setForeground(new java.awt.Color(253, 254, 254));
        addUserButton.setText("Add");
        addUserButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addUserButtonMouseClicked(evt);
            }
        });

        updateButton.setBackground(new java.awt.Color(19, 105, 192));
        updateButton.setForeground(new java.awt.Color(253, 254, 254));
        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        refreshIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/refresh-page-option.png"))); // NOI18N
        refreshIcon.setText("jLabel6");
        refreshIcon.setMaximumSize(new java.awt.Dimension(36, 36));
        refreshIcon.setMinimumSize(new java.awt.Dimension(36, 36));
        refreshIcon.setPreferredSize(new java.awt.Dimension(36, 36));
        refreshIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshIconMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(userManagementLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fullNameLabel)
                            .addComponent(usernameLabel)
                            .addComponent(usernameText, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fullNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(addUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(passwordLabel)
                            .addComponent(passwordText)
                            .addComponent(permissionLabel)
                            .addComponent(permissionDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4))))
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(tableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(refreshIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(userManagementLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(usernameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(usernameText, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fullNameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fullNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(passwordLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(passwordText, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(permissionLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(permissionDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(refreshIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        refreshIcon.getAccessibleContext().setAccessibleName("");
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Action handler for adding a new user. Validates the input fields and
     * invokes the UserDAO to save the user data.
     *
     * @param evt The mouse event triggering the action.
     */
    private void addUserButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addUserButtonMouseClicked
        if (lastInvalidField != null && lastInvalidFiledBorder != null) {
            lastInvalidField.setBorder(lastInvalidFiledBorder);
        }
        
        String username = usernameText.getText();
        if (username.isBlank() || !isValidUsername(username)) {
            setErrorBorder(usernameText);
            JOptionPane.showMessageDialog(this, """
                                                Username requirements:
                                                 - Username consists of alphanumeric characters (a-zA-Z0-9), lowercase, or uppercase.
                                                 - Username allowed of the dot (.), underscore (_), and hyphen (-).
                                                 - The dot (.), underscore (_), or hyphen (-) must not be the first or last character.
                                                 - The dot (.), underscore (_), or hyphen (-) does not appear consecutively, e.g., java..regex
                                                 - The number of characters must be between 5 to 20.""",
                    "Invalid Username",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        String password = passwordText.getText();
        if (password.isBlank() || !isValidPassword(password)) {
            setErrorBorder(passwordText);
            JOptionPane.showMessageDialog(this, """
                                                Secure Password requirements
                                                 
                                                 - Password must contain at least one digit [0-9].
                                                 - Password must contain at least one lowercase Latin character [a-z].
                                                 - Password must contain at least one uppercase Latin character [A-Z].
                                                 - Password must contain at least one special character like ! @ # & ( ).
                                                 - Password must contain a length of at least 8 characters and a maximum of 20 characters.""",
                    "Invalid Password",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        String fullName = fullNameText.getText();
        if (fullName.isBlank()) {
            setErrorBorder(fullNameText);
            JOptionPane.showMessageDialog(this, "Full name is blank", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Permission permission = Permission.valueOf(((String) permissionDropdown.getSelectedItem()).toUpperCase());

        panel.getMainFrame().showLoading();

        userDAO.get(username).thenAccept((optionalUser) -> {
            if (optionalUser.isPresent()) {
                panel.getMainFrame().hideLoading();
                setErrorBorder(usernameText);
                JOptionPane.showMessageDialog(this,
                        String.format("Username `%s` already exists", username),
                        "Warning",
                        JOptionPane.WARNING_MESSAGE);
            } else {
                User newUser = new User(username, HashUtil.hash(password), fullName, permission);
                userDAO.save(newUser).thenRun(() -> {
                    panel.getMainFrame().hideLoading();
                    JOptionPane.showMessageDialog(this,
                            String.format("User `%s` created successfully", username),
                            "Info",
                            JOptionPane.INFORMATION_MESSAGE
                    );
                    updateTableValues();
                });
            }
        });

    }//GEN-LAST:event_addUserButtonMouseClicked

    /**
     * Action handler for deleting a user. Validates the input field and invokes
     * the UserDAO to delete the user data.
     *
     * @param evt The mouse event triggering the action.
     */
    private void deleteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseClicked
        String username = usernameText.getText();
        if (username.isBlank()) {
            JOptionPane.showMessageDialog(this,
                    String.format("Please select user you want to delete", username),
                    "Warning",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        panel.getMainFrame().showLoading();

        userDAO.get(username).thenAccept((optionalUser) -> {
            if (optionalUser.isEmpty()) {
                panel.getMainFrame().hideLoading();
                JOptionPane.showMessageDialog(this,
                        String.format("User `%s` does not exist", username),
                        "Warning",
                        JOptionPane.WARNING_MESSAGE);
            } else {
                userDAO.delete(username).thenRunAsync(() -> {
                    panel.getMainFrame().hideLoading();
                    JOptionPane.showMessageDialog(this,
                            String.format("Delete user `%s` successfully", username),
                            "Info",
                            JOptionPane.INFORMATION_MESSAGE);
                    updateTableValues();
                });
            }
        });
    }//GEN-LAST:event_deleteButtonMouseClicked

    /**
     * Action handler for refreshing the user table. Fetches the latest user
     * data from the database and updates the table.
     *
     * @param evt The mouse event triggering the action.
     */
    private void refreshIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshIconMouseClicked
        updateTableValues();
    }//GEN-LAST:event_refreshIconMouseClicked

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        if (lastInvalidField != null && lastInvalidFiledBorder != null) {
            lastInvalidField.setBorder(lastInvalidFiledBorder);
        }
        
        String username = usernameText.getText();
        if (username.isBlank() || !isValidUsername(username)) {
            setErrorBorder(usernameText);
            JOptionPane.showMessageDialog(this, """
                                                Username requirements:
                                                 - Username consists of alphanumeric characters (a-zA-Z0-9), lowercase, or uppercase.
                                                 - Username allowed of the dot (.), underscore (_), and hyphen (-).
                                                 - The dot (.), underscore (_), or hyphen (-) must not be the first or last character.
                                                 - The dot (.), underscore (_), or hyphen (-) does not appear consecutively, e.g., java..regex
                                                 - The number of characters must be between 5 to 20.""",
                    "Invalid Username",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        String password = passwordText.getText();
        if (!password.isBlank() && !isValidPassword(password)) {
            setErrorBorder(passwordText);
            JOptionPane.showMessageDialog(this, """
                                                Secure Password requirements
                                                 
                                                 - Password must contain at least one digit [0-9].
                                                 - Password must contain at least one lowercase Latin character [a-z].
                                                 - Password must contain at least one uppercase Latin character [A-Z].
                                                 - Password must contain at least one special character like ! @ # & ( ).
                                                 - Password must contain a length of at least 8 characters and a maximum of 20 characters.""",
                    "Invalid Password",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        String fullName = fullNameText.getText();
        if (fullName.isBlank()) {
            setErrorBorder(fullNameText);
            JOptionPane.showMessageDialog(this, "Full name is blank", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Permission permission = Permission.valueOf(((String) permissionDropdown.getSelectedItem()).toUpperCase());

        panel.getMainFrame().showLoading();

        userDAO.get(username).thenAccept((optionalUser) -> {
            if (optionalUser.isEmpty()) {
                panel.getMainFrame().hideLoading();
                setErrorBorder(usernameText);
                JOptionPane.showMessageDialog(this,
                        String.format("User `%s` does not exist", username),
                        "Warning",
                        JOptionPane.WARNING_MESSAGE);
            } else {
                Runnable updateSuccessfully = () -> {
                    panel.getMainFrame().hideLoading();
                    JOptionPane.showMessageDialog(this,
                            String.format("Updated information for user `%s` successfully", username),
                            "Info",
                            JOptionPane.INFORMATION_MESSAGE);
                    panel.updateUserInfo();
                };
                if (password.isBlank()) {
                    User user = cachedUsers.get(username);
                    assert user != null;
                    user.setFullName(fullName);
                    user.setPermission(permission);
                    userDAO.update(user).thenRun(() -> {
                        if (user.getUsername().equals(panel.getUser().getUsername())) {
                            panel.setUser(user);
                        }
                    }).thenRun(updateSuccessfully).exceptionally((t) -> {
                        t.printStackTrace();
                        throw new RuntimeException(t);
                    });
                } else {
                    User user = cachedUsers.get(username);
                    assert user != null;
                    user.setFullName(fullName);
                    user.setPermission(permission);
                    user.setHashedPassword(HashUtil.hash(password));
                    userDAO.update(user).thenRun(() -> {
                        if (user.getUsername().equals(panel.getUser().getUsername())) {
                            panel.setUser(user);
                        }
                    }).thenRun(updateSuccessfully).exceptionally((t) -> {
                        t.printStackTrace();
                        throw new RuntimeException(t);
                    });
                }
            }
            SwingUtilities.invokeLater(() -> {
                updateTableValues();
            });
        }).exceptionally((t) -> {
            t.printStackTrace();
            throw new RuntimeException(t);
        });
    }//GEN-LAST:event_updateButtonActionPerformed

    /**
     * Registers a listener for table selection changes. Updates the input
     * fields with the selected user's details for editing or deletion.
     */
    private void registerTableSelectionListener() {
        table.getSelectionModel().addListSelectionListener((e) -> {
            int selectedRow = table.getSelectedRow();

            if (!e.getValueIsAdjusting() && selectedRow != -1) {
                int modelRow = table.convertRowIndexToModel(selectedRow);
                usernameText.setText((String) table.getModel().getValueAt(modelRow, 0));
                passwordText.setText("");
                fullNameText.setText((String) table.getModel().getValueAt(modelRow, 1));
                Permission permission = (Permission) table.getModel().getValueAt(modelRow, 2);
                if (permission.equals(Permission.ADMINISTRATOR)) {
                    permissionDropdown.setSelectedIndex(0);
                } else {
                    permissionDropdown.setSelectedIndex(1);
                }
            }

        });
    }

    /**
     * Checks if the given username matches the required pattern.
     *
     * @param username The username to validate.
     * @return True if the username is valid, otherwise false.
     */
    private boolean isValidUsername(String username) {
        return USERNAME_PATTERN.matcher(username).matches();
    }

    /**
     * Checks if the given password matches the required pattern.
     *
     * @param password The password to validate.
     * @return True if the password is valid, otherwise false.
     */
    private boolean isValidPassword(String password) {
        return PASSWORD_PATTERN.matcher(password).matches();
    }
    
    public void setErrorBorder(JTextField field) {
        lastInvalidField = field;
        lastInvalidFiledBorder = field.getBorder();
        field.setBorder(errorBorder);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addUserButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel fullNameLabel;
    private javax.swing.JTextField fullNameText;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTextField passwordText;
    private javax.swing.JComboBox<String> permissionDropdown;
    private javax.swing.JLabel permissionLabel;
    private javax.swing.JLabel refreshIcon;
    private javax.swing.JTable table;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JButton updateButton;
    private javax.swing.JLabel userManagementLabel;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameText;
    // End of variables declaration//GEN-END:variables
}
